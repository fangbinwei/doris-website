"use strict";(self.webpackChunkselectdb_portal=self.webpackChunkselectdb_portal||[]).push([[42939],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},O=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(t),O=a,k=u["".concat(p,".").concat(O)]||u[O]||d[O]||l;return t?r.createElement(k,o(o({ref:n},c),{},{components:t})):r.createElement(k,o({ref:n},c))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=O;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}O.displayName="MDXCreateElement"},26889:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const l={title:"GROUP BY",language:"en"},o=void 0,i={unversionedId:"sql-reference/sql-statements/Data-Manipulation/GROUP-BY",id:"version-0.15/sql-reference/sql-statements/Data-Manipulation/GROUP-BY",title:"GROUP BY",description:"\x3c!--",source:"@site/versioned_docs/version-0.15/sql-reference/sql-statements/Data-Manipulation/GROUP-BY.md",sourceDirName:"sql-reference/sql-statements/Data-Manipulation",slug:"/sql-reference/sql-statements/Data-Manipulation/GROUP-BY",permalink:"/docs/0.15/sql-reference/sql-statements/Data-Manipulation/GROUP-BY",draft:!1,tags:[],version:"0.15",frontMatter:{title:"GROUP BY",language:"en"},sidebar:"docs",previous:{title:"GET LABEL STATE",permalink:"/docs/0.15/sql-reference/sql-statements/Data-Manipulation/GET-LABEL-STATE"},next:{title:"LOAD",permalink:"/docs/0.15/sql-reference/sql-statements/Data-Manipulation/LOAD"}},p={},s=[{value:"description",id:"description",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Note",id:"note",level:3},{value:"example",id:"example",level:2},{value:"keyword",id:"keyword",level:2}],c={toc:s};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"group-by"},"GROUP BY"),(0,a.kt)("h2",{id:"description"},"description"),(0,a.kt)("p",null,"  GROUP BY ",(0,a.kt)("inlineCode",{parentName:"p"},"GROUPING SETS")," \uff5c ",(0,a.kt)("inlineCode",{parentName:"p"},"CUBE")," \uff5c ",(0,a.kt)("inlineCode",{parentName:"p"},"ROLLUP")," is an extension to  GROUP BY clause. This syntax lets you define multiple groupings in the same query. GROUPING SETS produce a single result set that is equivalent to a UNION ALL of differently grouped rows\nFor example GROUPING SETS clause:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SELECT a, b, SUM( c ) FROM tab1 GROUP BY GROUPING SETS ( (a, b), (a), (b), ( ) );\n")),(0,a.kt)("p",null,"  This statement is equivalent to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SELECT a, b, SUM( c ) FROM tab1 GROUP BY a, b\nUNION\nSELECT a, null, SUM( c ) FROM tab1 GROUP BY a\nUNION\nSELECT null, b, SUM( c ) FROM tab1 GROUP BY b\nUNION\nSELECT null, null, SUM( c ) FROM tab1\n")),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"GROUPING(expr)")," indicates whether a specified column expression in a GROUP BY list is aggregated or not. GROUPING returns 1 for aggregated or 0 for not aggregated in the result set."),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"GROUPING_ID(expr  [ , expr [ , ... ] ])")," describes which of a list of expressions are grouped in a row produced by a GROUP BY query. The GROUPING_ID function simply returns the decimal equivalent of the binary value formed as a result of the concatenation of the values returned by the GROUPING functions."),(0,a.kt)("h3",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SELECT ...\nFROM ...\n[ ... ]\nGROUP BY [\n    , ... |\n    GROUPING SETS [, ...] (  groupSet [ , groupSet [ , ... ] ] ) |\n    ROLLUP(expr  [ , expr [ , ... ] ]) |\n    expr  [ , expr [ , ... ] ] WITH ROLLUP |\n    CUBE(expr  [ , expr [ , ... ] ]) |\n    expr  [ , expr [ , ... ] ] WITH CUBE\n    ]\n[ ... ]\n")),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"groupSet")," is a set of expression or column  or it's alias appearing in the query block\u2019s SELECT list. ",(0,a.kt)("inlineCode",{parentName:"p"},"groupSet ::= { ( expr  [ , expr [ , ... ] ] )}")),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"expr"),"  is expression or column  or it's alias appearing in the query block\u2019s SELECT list."),(0,a.kt)("h3",{id:"note"},"Note"),(0,a.kt)("p",null,"  doris supports PostgreSQL like syntax, for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SELECT a, b, SUM( c ) FROM tab1 GROUP BY GROUPING SETS ( (a, b), (a), (b), ( ) );\nSELECT a, b,c, SUM( d ) FROM tab1 GROUP BY ROLLUP(a,b,c)\nSELECT a, b,c, SUM( d ) FROM tab1 GROUP BY CUBE(a,b,c)\n")),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"ROLLUP(a,b,c)")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"GROUPING SETS")," as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GROUPING SETS (\n(a,b,c),\n( a, b ),\n( a),\n( )\n)\n")),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"CUBE ( a, b, c )")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"GROUPING SETS")," as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GROUPING SETS (\n( a, b, c ),\n( a, b ),\n( a,    c ),\n( a       ),\n(    b, c ),\n(    b    ),\n(       c ),\n(         )\n)\n")),(0,a.kt)("h2",{id:"example"},"example"),(0,a.kt)("p",null,"  This is a simple example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"> SELECT * FROM t;\n+------+------+------+\n| k1   | k2   | k3   |\n+------+------+------+\n| a    | A    |    1 |\n| a    | A    |    2 |\n| a    | B    |    1 |\n| a    | B    |    3 |\n| b    | A    |    1 |\n| b    | A    |    4 |\n| b    | B    |    1 |\n| b    | B    |    5 |\n+------+------+------+\n8 rows in set (0.01 sec)\n\n> SELECT k1, k2, SUM(k3) FROM t GROUP BY GROUPING SETS ( (k1, k2), (k2), (k1), ( ) );\n+------+------+-----------+\n| k1   | k2   | sum(`k3`) |\n+------+------+-----------+\n| b    | B    |         6 |\n| a    | B    |         4 |\n| a    | A    |         3 |\n| b    | A    |         5 |\n| NULL | B    |        10 |\n| NULL | A    |         8 |\n| a    | NULL |         7 |\n| b    | NULL |        11 |\n| NULL | NULL |        18 |\n+------+------+-----------+\n9 rows in set (0.06 sec)\n\n> SELECT k1, k2, GROUPING_ID(k1,k2), SUM(k3) FROM t GROUP BY GROUPING SETS ((k1, k2), (k1), (k2), ());\n+------+------+---------------+----------------+\n| k1   | k2   | grouping_id(k1,k2) | sum(`k3`) |\n+------+------+---------------+----------------+\n| a    | A    |             0 |              3 |\n| a    | B    |             0 |              4 |\n| a    | NULL |             1 |              7 |\n| b    | A    |             0 |              5 |\n| b    | B    |             0 |              6 |\n| b    | NULL |             1 |             11 |\n| NULL | A    |             2 |              8 |\n| NULL | B    |             2 |             10 |\n| NULL | NULL |             3 |             18 |\n+------+------+---------------+----------------+\n9 rows in set (0.02 sec)\n")),(0,a.kt)("h2",{id:"keyword"},"keyword"),(0,a.kt)("p",null,"  GROUP, GROUPING, GROUPING_ID, GROUPING_SETS, GROUPING SETS, CUBE, ROLLUP"))}u.isMDXComponent=!0}}]);