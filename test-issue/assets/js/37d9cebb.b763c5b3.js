"use strict";(self.webpackChunkselectdb_portal=self.webpackChunkselectdb_portal||[]).push([[63441],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(f,l(l({ref:t},s),{},{components:n})):a.createElement(f,l({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83985:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={title:"BITMAP_UNION",language:"en"},l=void 0,o={unversionedId:"sql-reference/sql-functions/aggregate-functions/bitmap_union",id:"version-0.15/sql-reference/sql-functions/aggregate-functions/bitmap_union",title:"BITMAP_UNION",description:"\x3c!--",source:"@site/versioned_docs/version-0.15/sql-reference/sql-functions/aggregate-functions/bitmap_union.md",sourceDirName:"sql-reference/sql-functions/aggregate-functions",slug:"/sql-reference/sql-functions/aggregate-functions/bitmap_union",permalink:"/docs/0.15/sql-reference/sql-functions/aggregate-functions/bitmap_union",draft:!1,tags:[],version:"0.15",frontMatter:{title:"BITMAP_UNION",language:"en"},sidebar:"docs",previous:{title:"AVG",permalink:"/docs/0.15/sql-reference/sql-functions/aggregate-functions/avg"},next:{title:"COUNT",permalink:"/docs/0.15/sql-reference/sql-functions/aggregate-functions/count"}},p={},u=[{value:"Create table",id:"create-table",level:2},{value:"Data Load",id:"data-load",level:2},{value:"Stream Load",id:"stream-load",level:3},{value:"Insert Into",id:"insert-into",level:3},{value:"Data Query",id:"data-query",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"keyword",id:"keyword",level:2}],s={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bitmap_union"},"BITMAP_UNION"),(0,r.kt)("h2",{id:"create-table"},"Create table"),(0,r.kt)("p",null,"The aggregation model needs to be used when creating the table. The data type is bitmap and the aggregation function is bitmap_union."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE TABLE `pv_bitmap` (\n\xa0\xa0`dt` int (11) NULL COMMENT" ",\n\xa0\xa0`page` varchar (10) NULL COMMENT" ",\n\xa0\xa0`user_id` bitmap BITMAP_UNION NULL COMMENT" "\n) ENGINE = OLAP\nAGGREGATE KEY (`dt`,` page`)\nCOMMENT "OLAP"\nDISTRIBUTED BY HASH (`dt`) BUCKETS 2;\n')),(0,r.kt)("p",null,"Note: When the amount of data is large, it is best to create a corresponding rollup table for high-frequency bitmap_union queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ALTER TABLE pv_bitmap ADD ROLLUP pv (page, user_id);\n")),(0,r.kt)("h2",{id:"data-load"},"Data Load"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TO_BITMAP (expr)"),": Convert 0 ~ 18446744073709551615 unsigned bigint to bitmap"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"BITMAP_EMPTY ()"),": Generate empty bitmap columns, used for insert or import to fill the default value"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"BITMAP_HASH (expr)"),": Convert any type of column to a bitmap by hashing"),(0,r.kt)("h3",{id:"stream-load"},"Stream Load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'cat data | curl --location-trusted -u user: passwd -T--H "columns: dt, page, user_id, user_id = to_bitmap (user_id)" http: // host: 8410 / api / test / testDb / _stream_load\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'cat data | curl --location-trusted -u user: passwd -T--H "columns: dt, page, user_id, user_id = bitmap_hash (user_id)" http: // host: 8410 / api / test / testDb / _stream_load\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'cat data | curl --location-trusted -u user: passwd -T--H "columns: dt, page, user_id, user_id = bitmap_empty ()" http: // host: 8410 / api / test / testDb / _stream_load\n')),(0,r.kt)("h3",{id:"insert-into"},"Insert Into"),(0,r.kt)("p",null,"id2's column type is bitmap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"insert into bitmap_table1 select id, id2 from bitmap_table2;\n")),(0,r.kt)("p",null,"id2's column type is bitmap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"INSERT INTO bitmap_table1 (id, id2) VALUES (1001, to_bitmap (1000)), (1001, to_bitmap (2000));\n")),(0,r.kt)("p",null,"id2's column type is bitmap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"insert into bitmap_table1 select id, bitmap_union (id2) from bitmap_table2 group by id;\n")),(0,r.kt)("p",null,"id2's column type is int"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"insert into bitmap_table1 select id, to_bitmap (id2) from table;\n")),(0,r.kt)("p",null,"id2's column type is String"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"insert into bitmap_table1 select id, bitmap_hash (id_string) from table;\n")),(0,r.kt)("h2",{id:"data-query"},"Data Query"),(0,r.kt)("h3",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"BITMAP_UNION (expr)"),": Calculate the union of two Bitmaps. The return value is the new Bitmap value."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"BITMAP_UNION_COUNT (expr)"),": Calculate the cardinality of the union of two Bitmaps, equivalent to BITMAP_COUNT (BITMAP_UNION (expr)). It is recommended to use the BITMAP_UNION_COUNT function first, its performance is better than BITMAP_COUNT (BITMAP_UNION (expr))."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"BITMAP_UNION_INT (expr)"),": Count the number of different values \u200b\u200bin columns of type TINYINT, SMALLINT and INT, return the sum of COUNT (DISTINCT expr) same"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"INTERSECT_COUNT (bitmap_column_to_count, filter_column, filter_values \u200b\u200b...)"),": The calculation satisfies\nfilter_column The cardinality of the intersection of multiple bitmaps of the filter.\nbitmap_column_to_count is a column of type bitmap, filter_column is a column of varying dimensions, and filter_values \u200b\u200bis a list of dimension values."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"The following SQL uses the pv_bitmap table above as an example:"),(0,r.kt)("p",null,"Calculate the deduplication value for user_id:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"select bitmap_union_count (user_id) from pv_bitmap;\n\nselect bitmap_count (bitmap_union (user_id)) from pv_bitmap;\n")),(0,r.kt)("p",null,"Calculate the deduplication value of id:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"select bitmap_union_int (id) from pv_bitmap;\n")),(0,r.kt)("p",null,"Calculate the retention of user_id:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"select intersect_count (user_id, page, 'meituan') as meituan_uv,\nintersect_count (user_id, page, 'waimai') as waimai_uv,\nintersect_count (user_id, page, 'meituan', 'waimai') as retention // Number of users appearing on both 'meituan' and 'waimai' pages\nfrom pv_bitmap\nwhere page in ('meituan', 'waimai');\n")),(0,r.kt)("h2",{id:"keyword"},"keyword"),(0,r.kt)("p",null,"BITMAP, BITMAP_COUNT, BITMAP_EMPTY, BITMAP_UNION, BITMAP_UNION_INT, TO_BITMAP, BITMAP_UNION_COUNT, INTERSECT_COUNT"))}c.isMDXComponent=!0}}]);